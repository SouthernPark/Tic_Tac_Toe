/* how we calculate the box content */
*, *::before, *::after{
    /* tells the browser to account for any border and padding in the values you specify for an element's width and height. */
    box-sizing: border-box;
}

:root{
    /* var for the size of the cell */
    --cell-size: 100px;
    /* var for the size of mark x o */
    --mark-size: calc(var(--cell-size) * 0.9);
}

body{
    margin: 0;
}

.board{
    /* background-color: black; */
    width: 100vw;
    height: 100vh;
    /* display contents inside board as grid */
    display: grid;
    /* cell are centered according to board */
    justify-content: center;
    align-content: center;

    /* items inside grid are centered according grig */
    justify-items: center;
    align-items: center;
    /* equal to: auto auto auto */
    /* set three columns (we have nine blocks, each column will have three blocks) */
    /* 
    1 2 3
    4 5 6
    7 8 9
    */
    grid-template-columns: repeat(3, auto);
}

.cell{
    width: var(--cell-size);
    height: var(--cell-size);
    border: 1px solid black;
    display: flex;
    justify-content: center;
    align-items: center;
    position: relative;
    cursor: pointer;
}

.cell.x,
.cell.circle{
    cursor: not-allowed;

}

/* remove top boarder */
.cell:first-child,
.cell:nth-child(2),
.cell:nth-child(3){
    border-top: none;
}

/* remove the left boarder */
/* 1, 4, 7 */
.cell:nth-child(3n+1){
    border-left: none;
}
/* 3, 6, 9 */
/* remove the right boarder */
.cell:nth-child(3n+3){
    border-right: none;
}

.cell:nth-child(7),
.cell:nth-child(8),
.cell:nth-child(9){
    border-bottom: none;
}

/* create the X marker */
/* firstly get two I */
.cell.x::before,
.cell.x::after,
.board.x .cell:not(.x):not(.circle):hover::before,
.board.x .cell:not(.x):not(.circle):hover::after{
    content: '';
    width: calc(var(--mark-size) *.15);
    height: var(--mark-size);
    background-color: black;
    position: absolute;
}

/* then rotate the two */
.cell.x::before,
.board.x .cell:not(.x):not(.circle):hover::before{
    transform: rotate(45deg);
}

.cell.x::after,
.board.x .cell:not(.x):not(.circle):hover::after{
    transform: rotate(-45deg);
}

/* make a circle class */
.cell.circle::before,
.cell.circle::after,
.board.circle .cell:not(.circle):not(.x):hover::before,
.board.circle .cell:not(.circle):not(.x):hover::after
{
    content: '';
    border-radius: 50%;
    position: absolute;
}

/* bigger circle */
.cell.circle::before,
.board.circle .cell:not(.circle):not(.x):hover::before
{
    width: var(--mark-size);
    height: var(--mark-size);
    background-color: black;
}

/* smaller circle */
.cell.circle::after,
.board.circle .cell:not(.circle):not(.x):hover::after
{
    width: calc(var(--mark-size)* 0.7);
    height: calc(var(--mark-size)* 0.7);
    background-color: white;
}


/* hover effects */
/* if it's x turn, then hover x */
/* if it's o turn, then hover o */
/* How to decide whose turn? --> .board.x   .board.circle */

/* we hover at the cell if its x's turn */
.board.x .cell:not(.x):not(.circle):hover::before,
.board.x .cell:not(.x):not(.circle):hover::after
{
    background-color: lightgrey;
}


/* hover effects for circle */
.board.circle .cell:not(.circle):not(.x):hover::before{
    background-color: lightgrey;
}


.winning-mess{
    
    display: none;

    position: fixed;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    background-color: rgba(0, 0, 0, 0.9);

    justify-content: center;
    align-items: center;

    color: white;
    font-size: 5rem;

    flex-direction: column;


}

#restartButton{
    font-size: 3rem;
    background-color: white;
    border: 1px solid black;
    padding: .25em .5em;
    cursor: pointer;
}

#restartButton:hover{
    background-color: black;
    color: white;
    border-color: white;
}

.winning-mess.show{
    display: flex;
}


